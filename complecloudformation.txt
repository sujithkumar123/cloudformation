AWSTemplateFormatVersion: "2010-09-09"
Description: about vpc creating
Parameters:
  ServerEnv:
    Description: about Env
    ConstraintDescription: about select env
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  AWSRegion: 
    Type: String
    Default: us-west-2
  InstanceAvailabilityZones:
     Description: Name of an existing availabilityzone
     Type: CommaDelimitedList
     Default: us-west-2a,us-west-2b,us-west-2c
  InstanceType:
    Type: String
    Default: t2.micro
  Password:
    NoEcho: true
    Type: String
    Description: new account password
    MinLength: 1
    MaxLength: 41
    ConstraintDescription: the password between 1 to 41 characterstics
  VPCFlowLog:
    Description: about vpcflowlog
    Type: String
  
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    PublicSubnet1:
      CIDR: 10.0.0.0/24
    PublicSubnet2:
      CIDR: 10.0.1.0/24
    PublicSubnet3:
      CIDR: 10.0.2.0/24
    PrivateSubnet1:
      CIDR: 10.0.3.0/24
    PrivateSubnet2:
      CIDR: 10.0.4.0/24
    PrivateSubnet3:
      CIDR: 10.0.5.0/24
  AWSInstanceType2Arch:
    t2.micro:
      Arch: '64'
    m1.small:
      Arch: '32'
    m1.large:
      Arch: '64'
    m1.xlarge:
      Arch: '64'
    m2.xlarge:
      Arch: '64'
    m2.2xlarge:
      Arch: '64'
    m2.4xlarge:
      Arch: '64'
    c1.medium:
      Arch: '32'
    c1.xlarge:
      Arch: '64'
    cc1.4xlarge:
      Arch: '64'
  AWSRegionArch2AMI:
    us-east-1:
      '32': ami-b89842d1
      '64': ami-3c994355
    us-west-2:
      '32': ami-d5712a90
      '64': ami-0553ff0c22b782b45
    eu-west-1:
      '32': ami-25e8d351
      '64': ami-3b65664f
Resources:
  CFNUser:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password: !Ref 'Password'
  CFNUserGroup:
    Type: AWS::IAM::Group
  CFNAdminGroup:
    Type: AWS::IAM::Group
  Users:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref 'CFNUserGroup'
      Users: [!Ref 'CFNUser']
  Admins:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref 'CFNAdminGroup'
      Users: [!Ref 'CFNUser']
  CFNUserPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CFNUsers
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: ['cloudformation:Describe*', 'cloudformation:List*', 'cloudformation:Get*']
          Resource: '*'
      Groups: [!Ref 'CFNUserGroup']
  CFNAdminPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CFNAdmins
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: cloudformation:*
          Resource: '*'
      Groups: [!Ref 'CFNAdminGroup']
  CFNKeys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref 'CFNUser'
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - VPC
          - CIDR
      Tags:
        - Key: Name
          Value: !Sub ${ServerEnv}-MyVPC1
    
  MyVPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !Ref VPCFlowLog
      LogGroupName: !Sub "${ServerEnv}-MyVPCFlowLogsGroup"
      ResourceId: !Ref "MyVPC"
      ResourceType: "VPC"
      TrafficType: "ALL"

  MyIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ServerEnv}-MyIGW1
  MyVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyIGW
      
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      MapPublicIpOnLaunch: "true"
      AvailabilityZone: !Select [ '0', !GetAZs ]
      CidrBlock:
      
        Fn::FindInMap:
          - SubnetConfig
          - PublicSubnet1
          - CIDR
      Tags:
        - Key: Name
          Value: !Sub ${ServerEnv}-MyPublicSubnet1      
      
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ '1', !GetAZs ]
      MapPublicIpOnLaunch: "true"
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - PublicSubnet2
          - CIDR
      Tags:
        - Key: Name
          Value: !Sub ${ServerEnv}-MyPublicSubnet2      
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      MapPublicIpOnLaunch: "true"
      AvailabilityZone: !Select [ '2', !GetAZs ]
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - PublicSubnet3
          - CIDR
      Tags:
        - Key: Name
          Value: !Sub ${ServerEnv}-MyPublicSubnet3          
  MyPublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${ServerEnv}-PublicRouteTable1

  MyPublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC 
      Tags:
        - Key: Name
          Value: !Sub ${ServerEnv}-PublicRouteTable2
  MyPublicRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC   
      Tags:
        - Key: Name
          Value: !Sub ${ServerEnv}-PublicRouteTable3
  MyPublic1SubnetRouteTableAsscoiation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPublicRouteTable1
      SubnetId:  !Ref PublicSubnet1
  Mypublic2SubnetRouteTableAsscoiation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPublicRouteTable2
      SubnetId:  !Ref PublicSubnet2      
  MyPublic3SubnetRouteTableAsscoiation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPublicRouteTable3
      SubnetId:  !Ref PublicSubnet3    
     
  MyPublicRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIGW      
  MyPublicRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIGW
  MyPublicRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPublicRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIGW      
  MyPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ '0', !GetAZs ]
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - PrivateSubnet1
          - CIDR
      Tags: 
        - Key: Name
          Value: !Sub ${ServerEnv}-PrivateSubnet1
         
  MyPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ '1', !GetAZs ]
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - PrivateSubnet2
          - CIDR
      Tags: 
        - Key: Name
          Value: !Sub ${ServerEnv}-PrivateSubnet2    
  MyPrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ '2', !GetAZs ] 
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - PrivateSubnet3
          - CIDR
      Tags: 
        - Key: Name
          Value: !Sub ${ServerEnv}-privateSubnet3   
  MyNATGateway1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  MyNATGateway2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc  
  MyNATGateway3EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc      
  MyNATGateway1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
        - "MyNATGateway1EIP"
        - "AllocationId"  
      SubnetId: !Ref "PublicSubnet1"
  MyNATGateway2:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
        - "MyNATGateway2EIP"
        - "AllocationId"  
      SubnetId: !Ref "PublicSubnet2"
  MyNATGateway3:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
        - "MyNATGateway3EIP"
        - "AllocationId"  
      SubnetId: !Ref "PublicSubnet3"
  MyPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${ServerEnv}-PrivateRouteTable1
  MyPrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC 
      Tags:
        - Key: Name
          Value: !Sub ${ServerEnv}-PrivateRouteTable2
  MyPrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC  
      Tags:
        - Key: Name
          Value: !Sub ${ServerEnv}-PrivateRouteTable3
      
  MyPrivate1SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPrivateSubnet1
      RouteTableId: !Ref MyPrivateRouteTable1
      
      
  MyPrivate2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:      
      SubnetId:  !Ref MyPrivateSubnet2
      RouteTableId: !Ref MyPrivateRouteTable2
      
  MyPrivate3SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:      
      SubnetId: !Ref MyPrivateSubnet3
      RouteTableId: !Ref MyPrivateRouteTable3
  MyPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNATGateway1
  MyPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:      
        !Ref MyNATGateway2
  MyPrivateRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:      
        !Ref MyNATGateway3
  MyPublicNetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref "MyVPC"
      Tags:
        - Key: "Name"
          Value: !Sub "${ServerEnv}-PublicNetworkACL"
            
  MyPrivateNetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: "Name"
          Value: !Sub "${ServerEnv}-PrivateNetworkACL"
        
  MyPublicSubnet1NetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref "PublicSubnet1"
      NetworkAclId: !Ref "MyPublicNetworkACL"
  MyPublicSubnet1NetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref "PublicSubnet2"
      NetworkAclId: !Ref "MyPublicNetworkACL"
  MyPublicSubnet1NetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref "PublicSubnet3"
      NetworkAclId: !Ref "MyPublicNetworkACL"
  
  MyPrivateSubnet1NetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref "MyPrivateSubnet1"
      NetworkAclId: !Ref "MyPrivateNetworkACL"
     
  MyPrivateSubnet1NetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref "MyPrivateSubnet2"
      NetworkAclId: !Ref "MyPrivateNetworkACL"
        
  MyPrivateSubnet1NetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref "MyPrivateSubnet3"
      NetworkAclId: !Ref "MyPrivateNetworkACL"
            
    
  
        
          
  ProjectSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: about ec2 security group
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
        
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: about ec2 security group
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
        
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0  
  
  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !Ref InstanceAvailabilityZones
      
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: 2
      MaxSize: 4
      VPCZoneIdentifier:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      - Ref: PublicSubnet3
      - Ref: MyPrivateSubnet1
      - Ref: MyPrivateSubnet2
      - Ref: MyPrivateSubnet3
      TargetGroupARNs:
        - !Ref ALBTargetGroup
        - !Ref TargetGroup2
  
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      SecurityGroups: [!Ref 'InstanceSecurityGroup']
      InstanceType: !Ref InstanceType
      KeyName: !Ref 'KeyName'
      ImageId: ami-08692d171e3cf02d6
        
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              sudo apt-get install apache2 -y
              sudo service start apache2
              sudo usermod -a -G ubuntu root
              sudo chown -R root:ubuntu /var/www
              sudo chmod 2755 /var/www
              sudo mkdir -p /var/www/html/in
              sudo mkdir -p /var/www/html/im
              sudo echo "hello everytwo">>/var/www/html/im/index.html
              sudo echo "hello everyone">> /var/www/html/in/image
              
              
  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref MyAutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: 100
  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref MyAutoScalingGroup
      Cooldown: 600
      ScalingAdjustment: '-1'
  CPUAlarmHigh:  
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 40% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 120
      EvaluationPeriods: 5
      Threshold: 40
      AlarmActions: 
        - !Ref WebServerScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref MyAutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:  
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU <20% for 60 min
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 120
      EvaluationPeriods: 30
      Threshold: 20
      AlarmActions: 
        - !Ref WebServerScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref MyAutoScalingGroup
      ComparisonOperator: LessThanThreshold
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALBElasticLoadBalancer
      Port: 80
      Protocol: HTTP
  ALBListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    DependsOn: ALBListener
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /im/index.html
      ListenerArn: !Ref ALBListener
      Priority: 1

  ListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    DependsOn: ALBListener
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup2
      Conditions:
        - Field: path-pattern
          Values:
            - /in/image
      ListenerArn: !Ref ALBListener
      Priority: 2
       
  
  ALBElasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Ref ServerEnv
      Subnets: 
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      - !Ref PublicSubnet3
        
      SecurityGroups: [!Ref 'ProjectSecurityGroup']
      Tags:
        - Key: Name
          Value: !Ref ServerEnv
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: sujitjht
      VpcId: !Ref MyVPC
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /im/index.html
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2

  TargetGroup2:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: sujitj
      VpcId: !Ref MyVPC
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /in/image
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
Outputs:
  AccessKey:
    Value: !Ref 'CFNKeys'
    Description: AWSAccessKeyId of new user
  SecretKey:
    Value: !GetAtt [CFNKeys, SecretAccessKey]
    Description: AWSSecretAccessKey of new user
    VPC: 
    Description: "A reference to the created VPC"
    Value: !Ref "MyVPC"
    Export:
      Name: !Sub "${PMServerEnv}-VPC"


  MyVpcCIDR:
    Description: "A reference to the created VPC/CIDR"
    Value: !Ref "MyVpC"
    Export:
      Name: !Sub "${PMServerEnv}-PMVpcCIDR"


  MyPublicNetworkACL:
    Description: "A reference to the Public Network ACL"
    Value: !Ref "MyPublicNetworkACL"
    Export:
      Name: !Sub "${PMServerEnv}-MyPublicNetworkACL"


  MyPrivateNetworkACL: 
    Description: "A reference to the Private Network ACL"
    Value: !Ref "MyPrivateNetworkACL"
    Export:
      Name: !Sub "${PMServerEnv}-MyPrivateNetworkACL"


  PublicSubnets:
    Description: "A list of the public subnets"
    Value: !Join [ ",", [ !Ref "PublicSubnet1", !Ref "PublicSubnet2" ]]
    Export:
      Name: !Sub "${PMServerEnv}-PublicSubnets"


  PrivateSubnets:
    Description: "A list of the private subnets"
    Value: !Join [ ",", [ !Ref "PrivateSubnet1", !Ref "PrivateSubnet2" ]]
    Export:
      Name: !Sub "${PMServerEnv}-PrivateSubnets"


  PublicSubnet1:
    Description: "A reference to the public subnet in the 1st Availability Zone"
    Value: !Ref "PublicSubnet1"
    Export:
      Name: !Sub "${PMServerEnv}-PublicSubnet1"


  PublicSubnet2:
    Description: "A reference to the public subnet in the 2nd Availability Zone"
    Value: !Ref "PublicSubnet2"
    Export:
      Name: !Sub "${PMServerEnv}-PublicSubnet2"


  PrivateSubnet1:
    Description: "A reference to the private subnet in the 1st Availability Zone"
    Value: !Ref "MyPrivateSubnet1"
    Export:
      Name: !Sub "${PMServerEnv}-PrivateSubnet1"


  PrivateSubnet2: 
    Description: "A reference to the private subnet in the 2nd Availability Zone"
    Value: !Ref "MyPrivateSubnet2"
    Export:
      Name: !Sub "${PMServerEnv}-PrivateSubnet2"

  URL:
    Description: The URL of the website
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - ALBElasticLoadBalancer
          - DNSName
